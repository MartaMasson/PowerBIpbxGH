# Do not forget to give permissions to the runner to write in the repository.

name: CIPbix

on:
  workflow_dispatch:
  push:
    # Remove or update this to ignore only specific branches
    # branches-ignore:
    #   - 'main'

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    env:
      workspaceName: pbi-dev

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        persist-credentials: true
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '9.x'

    - name: Run PowerShell script
      run: |
        #Setting variables
        $appId = "${{secrets.APPID}}"
        $appSecret = "${{secrets.CLIENTSECRET}}"
        $tenantId = "${{secrets.TENANTID}}"

        #Import-Module MicrosoftPowerBIMgmt
        Get-PSRepository
        Write-Host "Installing Power BI Management module"
        Install-Module -Name MicrosoftPowerBIMgmt -Force -AllowClobber

        Import-Module MicrosoftPowerBIMgmt.Profile
        Import-Module MicrosoftPowerBIMgmt.Reports

        # Configure Git user
        git config --global user.name "SPN"
        git config --global user.email "admin@MngEnvMCAP843707.onmicrosoft.com"
        Write-Host "Git user configured"

        # Setting the attribute value to the files that will be deployed in this execution.
        $buildDateTime = Get-Date -Format "yyyyMMddHHmmss"
        $attributeName = "DeployOnDevDate"
        $attribute = "$($attributeName)=$($buildDateTime)"
        Write-Host "Attribute value for this execution: $($attribute)"

        # Create .gitattributes file if it doesn't exist
        if (-Not (Test-Path -Path ".gitattributes")) {
          New-Item -ItemType File -Path ".gitattributes"
        }
        $gitattributesPath = "$env:GITHUB_WORKSPACE\.gitattributes" # Getting content from attributes file
        Write-Host "Getting .gitattributes files path: $($gitattributesPath)"

        #Create secure string & credential for application id and client secret
        Write-Host "Authentication with SPN & cheking permissions"
        $PbiSecurePassword = ConvertTo-SecureString $appSecret -Force -AsPlainText
        $PbiCredential = New-Object Management.Automation.PSCredential($appId, $PbiSecurePassword)

        # Connecting to the Power BI service and getting the workspace.
        Write-Host "Connecting to the PowerBi Services and Workspace $($env:workspaceName)."
        Connect-PowerBIServiceAccount -ServicePrincipal -TenantId $tenantId -Credential $PbiCredential
        $workspaceObj = Get-PowerBIWorkspace -Name $($env:workspaceName)

        # Getting the pbix files lit from the Repos.
        Write-Host "Getting pbix report files to deploy in workspace $($env:workspaceName)"
        $pbixReports = Get-ChildItem -Path "$env:GITHUB_WORKSPACE" -Recurse -Filter "*.pbix"

        # To each file in the list of pbix files, we will deploy the new and changed ones in the workspace.
        foreach ($reportFile in $pbixReports) { # including the path
          Write-Host "PBIX file full name: $($reportFile.FullName)"
          Write-Host "PBIX file name: $($reportFile.Name)"
          Write-Host "PBIX file directory: $($reportFile.DirectoryName)"
          Write-Host "PBIX file size: $($reportFile.Length)"
          Write-Host "PBIX file last modified: $($reportFile.LastWriteTime)"
        
          Write-Host "PBIX file full name: $($reportFile.FullName)"

          # Getting the complet path+file name.
          $path = [System.IO.Path]::GetDirectoryName($reportFile.FullName)
          Write-Host "PBIX file path: $($path)"
          
          # Getting the the report name without the extension and path either.
          $reportName = [System.IO.Path]::GetFileNameWithoutExtension($reportFile)
          Write-Host "PBIX file report name: $($reportName)"

          # Removing spaces from report name to search in attributes file.
          $reportNameWithoutSpaces = $reportName -replace "\s", ""
          Write-Host "PBIX file report name without spaces: $($reportNameWithoutSpaces)"

          # Searcning attribute from report in attributes file.
          $attributeOutput = git check-attr $attributeName $reportNameWithoutSpaces
          $attributeOutput = $attributeOutput.Trim()
          Write-Host "attributeOutput: $($attributeOutput)"

          # Finally getting the value for the file attribute.
          $attributeOutput -match "$($attributeName):\s*(.*)"
          $attributeValue = $matches[1].Trim()
          Write-Host "attributeValue: $($attributeValue)"

          # Getting information from the last time the file was changed.
          $LastChange = git log -1 --follow --format=%cd --date=iso -- $reportFile.FullName
          Write-Host "Data do Último Commit que Modificou o Arquivo: $LastChange"

          #Getting the datatime from the last change in the file.
          $lastChangeFormattedDate = [datetime]::ParseExact($lastChange, "yyyy-MM-dd HH:mm:ss zzz", [System.Globalization.CultureInfo]::InvariantCulture).ToString("yyyyMMddHHmmss")                
          Write-Host "Data do Último Commit que Modificou o Arquivo formatada: $lastChangeFormattedDate"

          $uplodadPbxFile = "true"
          $attributeAction = "update"

          if (-not $attributeOutput -or $attributeValue -eq "unspecified" -or $attributeValue -eq "unset") { # attribute is not set in the attribute file 
            $attributeAction = "add"
            #  atributo será adocionado no arquivo .gitattributes
            Write-Host "The report will be deployed in the workspace."

          } else { # attribute is set in the attribute file
            if ($lastChangeFormattedDate -gt $attributeValue) { 
              #The file was changed after the last deployment, then it needs to be updated in the workspace. A new deployment date is set.
              Write-Host "The report will be updated in the workspace."
            } else {
              Write-Host "The file was not changed after the last deployment. Skipping the deployment."
              $uplodadPbxFile = false
            }
          }

          if ($uplodadPbxFile -eq "true") { # PBIX file will be deployed in the workspace.
              Write-Host "Deplolying $($reportFile.FullName) report in the $($env:workspaceName)."
              try {
                $pathFile = $reportFile.DirectoryName + $reportFile.Name
                Write-Host "Path + file: $($pathFile)"
                New-PowerBIReport -Path $pathFile -Name $reportName -Workspace $workspaceObj
                Write-Host "Report $reportName updated in workspace $($env:workspaceName) successfully."
              } catch {
                Write-Host "Error deploying report: $_"
                throw $_
              }

              #Set-PowerBIReport -Path "$($path)\" -Name $reportName -Workspace workspaceObj
              Write-Host "Report $reportName updated in workspace $($env:workspaceName) sucessfully."

              #updating the attribute indicating the file was deployed in the powerbi workspace
              If ($attributeAction -eq "add") { #Attribute 
                Write-Host "Adding attribute to the file: $($attribute)" 
                Add-Content -Path "$env:GITHUB_WORKSPACE\.gitattributes" -Value "$($reportNameWithoutSpaces) $($attribute)"
                Write-Host "Attribute added with success!"
              } else {
                Write-Host "The file was changed after the last deployment. Updating the report in the workspace".
                # Changing attribute in the file .gitattributes
                Write-Host "Changing attribute in the file: $($attribute)"
                (Get-Content $gitattributesPath) -replace "$($reportNameWithoutSpaces) $($attributeName)=.*", "$($reportNameWithoutSpaces) $($attribute)" | Set-Content $gitattributesPath
                Write-Host "Attribute changed with success!"
                #Write-Host "The report $reportName was not updated in the workspace $($env:workspaceName)."
              }
          }

        }
        # Commit and push changes
        Write-Host "Updating the file in the repository"
        git add .gitattributes
        git commit -m "Adding attribute to the file"
        git push origin HEAD:refs/heads/master

      shell: pwsh
