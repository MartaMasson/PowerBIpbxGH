trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: branchName
    value: master
  - name: filePath
    value: '.Reports/MyPBFile.pbix'
  

steps:
- checkout: self
  fetchDepth: 0

- powershell: |
      Write-Host "##[debug] Build ID: $(Build.BuildId)"
      Write-Host "##[debug] Build Number: $(Build.BuildNumber)"

      # Getting the pbix files list from the Repos.
      Write-Host "##[debug] Getting pbix report files to deploy in workspace"
      $pbixReports = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Recurse -Filter *.pbix

      # To each file in the list of pbix files, we will deploy the new and changed ones in the workspace.
      foreach ($reportFile in $pbixReports) { # including the path
        Write-Host "##[debug] PBIX file full name: $($reportFile.FullName)"

        if (Test-Path $reportFile.FullName) {
                $file = Get-Item $($reportFile.FullName)
                Write-Host "Nome: $($file.Name)"

                #$commit = git log -1 --follow --pretty=format:"%H" -- $reportFile.FullName
                #Write-Host "Último Commit que Modificou o Arquivo: $commit"

                $LastChange = git log -1 --follow --format=%cd --date=iso -- $reportFile.FullName
                Write-Host "Data do Último Commit que Modificou o Arquivo: $LastChange"

                $lastChangeFormattedDate = [datetime]::ParseExact($lastChange, "yyyy-MM-dd HH:mm:ss zzz", [System.Globalization.CultureInfo]::InvariantCulture).ToString("yyyyMMddHHmmss")                
                Write-Host "Data do Último Commit que Modificou o Arquivo formatada: $lastChangeFormattedDate"

                $buildDateTime = Get-Date -Format "yyyyMMddHHmmss"
                echo "Data e hora da build: $buildDateTime"

                # Obter o hash do blob do arquivo
                $blobHash=$(git ls-tree HEAD $reportFile.FullName | awk '{print $3}')

                # Adicionar uma nota ao blob
                git notes add -m "$($buildDateTime)-" $blobHash

                # Exibir a nota
                git notes show $blobHash

            } else {
                Write-Host "Arquivo não encontrado: $($reportFile.FullName)"
            }
      }


  displayName: 'Exibir informações do arquivo'

